generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entity {
  id         String      @id @default(uuid())
  Collection Collection?
  EntityTag  EntityTag[]
  Media      Media?
  Favorite   Favorite?

  @@map("entities")
}

model Tag {
  id        String      @id @default(uuid())
  name      String      @unique
  EntityTag EntityTag[]

  @@map("tags")
}

model EntityTag {
  entityId String @map("entity_id")
  tagId    String @map("tag_id")
  entity   Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([entityId, tagId])
  @@map("entity_tags")
}

model CollectionMedia {
  id           String     @id @default(uuid())
  collectionId String     @map("collection_id")
  mediaId      String     @map("media_id")
  order        Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  media        Media      @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@map("collection_media")
}

model Collection {
  id              String            @id @default(uuid())
  entityId        String            @unique @map("entity_id")
  title           String            @unique
  type            String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")
  author          String?
  entity          Entity            @relation(fields: [entityId], references: [id], onDelete: Cascade)
  CollectionMedia CollectionMedia[]

  @@map("collections")
}

model Media {
  id              String            @id @default(uuid())
  entityId        String            @unique @map("entity_id")
  link            String
  type            String
  originalLink    String?
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")
  author          String?
  fileName        String            @unique @map("file_name")
  previewId       String?           @unique
  size            Int               @default(0)
  title           String            @default("")
  hidden          Boolean           @default(false)
  entity          Entity            @relation(fields: [entityId], references: [id], onDelete: Cascade)
  Video           Media?            @relation("displayImage", fields: [previewId], references: [id])
  CollectionMedia CollectionMedia[]
  Photo           Media?            @relation("displayImage")

  @@map("medias")
}

model StorageSetting {
  version BigInt  @id @default(autoincrement())
  baseUrl String  @map("base_url")
  current Boolean @default(false)

  @@map("storage_settings")
}

model Activity {
  id             String   @id @default(uuid())
  actionType     String   @map("action_type")
  actionId       String   @map("action_id")
  actionItem     String   @map("action_item")
  actionItemType String   @map("action_item_type")
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("activities")
}

model Favorite {
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId  String   @unique @map("entity_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("favorites")
}
